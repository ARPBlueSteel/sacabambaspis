{
  "categories": {
    "Flowchart": "Flowchart",
    "SequenceDiagram": "SequenceDiagram",
    "ClassDiagram": "ClassDiagram",
    "StateDiagram": "StateDiagram",
    "EntityRelationshipDiagram": "EntityRelationshipDiagram",
    "UserJourneyDiagram": "UserJourneyDiagram",
    "GanttChart": "GanttChart",
    "PieChart": "PieChart",
    "RequirementDiagram": "RequirementDiagram",
    "GitGraph": "GitGraph",
    "Mindmap": "Mindmap",
    "Timeline": "Timeline",
    "C4Diagram": "C4Diagram",
    "QuadrantChart": "QuadrantChart"
  },
  "elements": [
    {
      "id": "0d135612-8e2f-487b-bc0f-005667e09f13",
      "category": "Flowchart",
      "description": "a simple flowchart with top to down direction",
      "content": "flowchart TD\nStart --> Stop",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "8359013e-3255-460b-9fc5-4764e5694346",
      "category": "Flowchart",
      "description": "a simple flowchart with left to right direction",
      "content": "flowchart LR\nStart --> Stop",
      "sortingOrder": 2,
      "isPinned": false
    },
    {
      "id": "d4377eb3-f806-40c3-93e9-8ac9c45ca686",
      "category": "Flowchart",
      "description": "A node with round edges",
      "content": "id1(Some text)",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "id": "18bc2617-e927-4a47-bd63-44b201ea70b1",
      "category": "Flowchart",
      "description": "A stadium-shaped node",
      "content": "id1([Some text])",
      "sortingOrder": 4,
      "isPinned": false
    },
    {
      "id": "eca2b6d7-cda8-44e3-91ee-f559befeae2d",
      "category": "Flowchart",
      "description": "A node in a cylindrical shape",
      "content": "id1[(Database)]",
      "sortingOrder": 5,
      "isPinned": false
    },
    {
      "id": "9e3b83b0-b604-445b-84ec-acb83a3fe45d",
      "category": "Flowchart",
      "description": "A node in the form of a circle",
      "content": "id1((Some text))",
      "sortingOrder": 6,
      "isPinned": false
    },
    {
      "id": "0788c2c3-82fb-40fe-b7b3-176bcbc994b3",
      "category": "Flowchart",
      "description": "A node (rhombus)",
      "content": "id1{Some text}",
      "sortingOrder": 7,
      "isPinned": false
    },
    {
      "id": "48f92cb5-f0da-45ee-92cb-9a3a1291123c",
      "category": "Flowchart",
      "description": "A link with arrow head",
      "content": "A-->B",
      "sortingOrder": 8,
      "isPinned": false
    },
    {
      "id": "3fe3127e-27e5-41fd-b8f2-723aa5e2cf08",
      "category": "Flowchart",
      "description": "An open link",
      "content": "A --- B",
      "sortingOrder": 9,
      "isPinned": false
    },
    {
      "id": "b27f427e-1815-4cb9-a7d3-606397c92cd6",
      "category": "Flowchart",
      "description": "Text on links",
      "content": "A-- This is the text! ---B",
      "sortingOrder": 10,
      "isPinned": false
    },
    {
      "id": "1e2fcc09-da3a-4709-bdba-e06bcbc99d8d",
      "category": "Flowchart",
      "description": "A link with arrow head and text",
      "content": "A-->|text|B",
      "sortingOrder": 11,
      "isPinned": false
    },
    {
      "id": "e3620376-127d-4a0d-826b-6b08f972cf13",
      "category": "Flowchart",
      "description": "Dotted link",
      "content": "A-.->B",
      "sortingOrder": 12,
      "isPinned": false
    },
    {
      "id": "e4174b1a-78b9-42ee-a056-f32ce9a4f67a",
      "category": "Flowchart",
      "description": "Thick link",
      "content": "A ==> B",
      "sortingOrder": 13,
      "isPinned": false
    },
    {
      "id": "d8728ea3-2848-4897-b7f8-cbbfcbfb7438",
      "category": "Flowchart",
      "description": "Subgraph",
      "content": "subgraph one\na1-->a2\nend",
      "sortingOrder": 14,
      "isPinned": false
    },
    {
      "id": "36a3935c-8c30-4ec6-86a5-2072bb341731",
      "category": "SequenceDiagram",
      "description": "a simple sequence diagram",
      "content": "sequenceDiagram\nAlice->>John: Hello John, how are you?\nJohn-->>Alice: Great!\nAlice-)John: See you later!",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "id": "d46668fc-e596-4194-9fd7-6c7dcd9c3704",
      "category": "SequenceDiagram",
      "description": "a simple sequence diagram with actors",
      "content": "sequenceDiagram\nactor Alice\nactor John\nAlice->>John: Hello John, how are you?\nJohn-->>Alice: Great!\nAlice-)John: See you later!",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "1cc6ec3c-b1c4-48d6-a8ba-82a2f42b10ab",
      "category": "ClassDiagram",
      "description": "sample class",
      "content": "class Duck{\n            +String beakColor\n            +swim()\n            +quack()\n        }",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "id": "d666aba1-60f7-43dc-afcd-ad03b11abc65",
      "category": "ClassDiagram",
      "description": "sample class",
      "content": "class BankAccount\n        BankAccount : +String owner\n        BankAccount : +Bigdecimal balance\n        BankAccount : +deposit(amount)\n        BankAccount : +withdrawal(amount)",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "5deab7c1-5b3c-4942-a798-4e02a36c67a2",
      "category": "ClassDiagram",
      "description": "generic class",
      "content": "class Square~Shape~{\n            int id\n            List~int~ position\n            setPoints(List~int~ points)\n            getPoints() List~int~\n        }\n        \n        Square : -List~string~ messages\n        Square : +setMessages(List~string~ messages)\n        Square : +getMessages() List~string~",
      "sortingOrder": 2,
      "isPinned": false
    },
    {
      "id": "063cbdef-34b7-484a-bdd0-f6f4d37bd235",
      "category": "ClassDiagram",
      "description": "inheritance",
      "content": "classA <|-- classB",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "id": "c2f777de-9667-4d03-8a72-61998b5e5acc",
      "category": "ClassDiagram",
      "description": "composition",
      "content": "classC *-- classD",
      "sortingOrder": 4,
      "isPinned": false
    },
    {
      "id": "9c19faa5-2386-4698-84d0-5705c256eb6a",
      "category": "ClassDiagram",
      "description": "aggregation",
      "content": "classE o-- classF",
      "sortingOrder": 5,
      "isPinned": false
    },
    {
      "id": "e6649c01-7c3e-4766-bd27-52d0c827cb75",
      "category": "ClassDiagram",
      "description": "association",
      "content": "classG <-- classH",
      "sortingOrder": 6,
      "isPinned": false
    },
    {
      "id": "7bfabfa3-5fa5-4f30-9f00-216c5732213e",
      "category": "ClassDiagram",
      "description": "solid link",
      "content": "classI -- classJ",
      "sortingOrder": 7,
      "isPinned": false
    },
    {
      "id": "1d409196-1bf0-4a2b-ac5a-fbad245556f9",
      "category": "ClassDiagram",
      "description": "dependency",
      "content": "classK <.. classL",
      "sortingOrder": 8,
      "isPinned": false
    },
    {
      "id": "d2389942-18e2-473a-b601-664c816d1205",
      "category": "ClassDiagram",
      "description": "realization",
      "content": "classM <|.. classN",
      "sortingOrder": 9,
      "isPinned": false
    },
    {
      "id": "7f7413e0-2bc9-45eb-8ce5-d0382b87d9c4",
      "category": "ClassDiagram",
      "description": "dashed link",
      "content": "classO .. classP",
      "sortingOrder": 10,
      "isPinned": false
    },
    {
      "id": "1a9af946-13b1-4815-9b19-eb3937173507",
      "category": "ClassDiagram",
      "description": "two-way relation",
      "content": "Animal <|--|> Zebra",
      "sortingOrder": 11,
      "isPinned": false
    },
    {
      "id": "e8b9dca0-a0f4-413a-8b16-03107f1ba747",
      "category": "ClassDiagram",
      "description": "sample class diagram",
      "content": "classDiagram\n        Animal <|-- Duck\n        Animal <|-- Fish\n        Animal <|-- Zebra\n        Animal : +int age\n        Animal : +String gender\n        Animal: +isMammal()\n        Animal: +mate()\n        class Duck{\n            +String beakColor\n            +swim()\n            +quack()\n        }\n        class Fish{\n            -int sizeInFeet\n            -canEat()\n        }\n        class Zebra{\n            +bool is_wild\n            +run()\n        }",
      "sortingOrder": 12,
      "isPinned": false
    },
    {
      "id": "dc6e164d-e4c6-4b1e-9b05-fc0e8a87abf8",
      "category": "StateDiagram",
      "description": "a sample state diagram",
      "content": "stateDiagram-v2\n        [*] --> Still\n        Still --> [*]\n    \n        Still --> Moving\n        Moving --> Still\n        Moving --> Crash\n        Crash --> [*]",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "id": "afde7ddc-a55e-44f3-9f37-c2df3ccdb754",
      "category": "StateDiagram",
      "description": "a sample state diagram with left-to-right direction",
      "content": "stateDiagram-v2\n        direction LR\n        [*] --> Still\n        Still --> [*]\n    \n        Still --> Moving\n        Moving --> Still\n        Moving --> Crash\n        Crash --> [*]",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "db99a3fa-75fd-4326-9bbc-e6630b6a62f5",
      "category": "StateDiagram",
      "description": "node with description",
      "content": "s2 : This is a state description",
      "sortingOrder": 2,
      "isPinned": false
    },
    {
      "id": "a59b81bb-6045-429b-9d6b-f21cd6768e60",
      "category": "StateDiagram",
      "description": "a transition",
      "content": "s1 --> s2",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "id": "d62d6b54-27d9-46ac-9365-e4d9a320a448",
      "category": "StateDiagram",
      "description": "a transition with label",
      "content": "s1 --> s2: A transition",
      "sortingOrder": 4,
      "isPinned": false
    },
    {
      "id": "db36040e-9112-4661-9b22-925cd2809ea4",
      "category": "StateDiagram",
      "description": "composite state",
      "content": "\n        [*] --> First\n        state First {\n            [*] --> second\n            second --> [*]\n        }",
      "sortingOrder": 5,
      "isPinned": false
    },
    {
      "id": "a6afa56a-1e55-4942-a8d2-8ef42e2bd50c",
      "category": "StateDiagram",
      "description": "diagram with choice",
      "content": "stateDiagram-v2\n        state if_state <<choice>>\n        [*] --> IsPositive\n        IsPositive --> if_state\n        if_state --> False: if n < 0\n        if_state --> True : if n >= 0",
      "sortingOrder": 6,
      "isPinned": false
    },
    {
      "id": "a73dcf7e-4d60-41fe-96e1-8bd920a2d742",
      "category": "StateDiagram",
      "description": "diagram with fork",
      "content": "stateDiagram-v2\n        state fork_state <<fork>>\n          [*] --> fork_state\n          fork_state --> State2\n          fork_state --> State3\n    \n          state join_state <<join>>\n          State2 --> join_state\n          State3 --> join_state\n          join_state --> State4\n          State4 --> [*]",
      "sortingOrder": 7,
      "isPinned": false
    },
    {
      "id": "2c021d40-242e-4bd3-90fd-9164433d6d44",
      "category": "StateDiagram",
      "description": "a diagram with concurrency",
      "content": "stateDiagram-v2\n        [*] --> Active\n    \n        state Active {\n            [*] --> NumLockOff\n            NumLockOff --> NumLockOn : EvNumLockPressed\n            NumLockOn --> NumLockOff : EvNumLockPressed\n            --\n            [*] --> CapsLockOff\n            CapsLockOff --> CapsLockOn : EvCapsLockPressed\n            CapsLockOn --> CapsLockOff : EvCapsLockPressed\n            --\n            [*] --> ScrollLockOff\n            ScrollLockOff --> ScrollLockOn : EvScrollLockPressed\n            ScrollLockOn --> ScrollLockOff : EvScrollLockPressed\n        }",
      "sortingOrder": 8,
      "isPinned": false
    },
    {
      "id": "dabb2720-1b8b-415e-a6e3-2450a4695638",
      "category": "EntityRelationshipDiagram",
      "description": "a sample entity relationship diagram",
      "content": "erDiagram\n        CUSTOMER ||--o{ ORDER : places\n        ORDER ||--|{ LINE-ITEM : contains\n        CUSTOMER }|..|{ DELIVERY-ADDRESS : uses",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "id": "79464a81-9ee7-4ab5-af9e-ad4cd5029410",
      "category": "EntityRelationshipDiagram",
      "description": "an entity",
      "content": "    CUSTOMER {\n            string name\n            string custNumber\n            string sector\n        }",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "31016d31-f41f-4878-a36f-05085c28b6c7",
      "category": "EntityRelationshipDiagram",
      "description": "one-to-many relationship",
      "content": "A ||--|{ B : label",
      "sortingOrder": 2,
      "isPinned": false
    },
    {
      "id": "c73d00f4-3bab-4879-a217-9e7ec1070e77",
      "category": "EntityRelationshipDiagram",
      "description": "many-to-many relationship",
      "content": "A }|--|{ B : label",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "id": "1c94b2c4-3466-4c90-9a02-f0667fb1758f",
      "category": "EntityRelationshipDiagram",
      "description": "one-to-one relationship",
      "content": "A ||--|| B : label",
      "sortingOrder": 4,
      "isPinned": false
    },
    {
      "id": "5c1ef00d-327e-437b-bc8d-a7c25549b862",
      "category": "EntityRelationshipDiagram",
      "description": "many-to-one relationship",
      "content": "A }|--|| B : label",
      "sortingOrder": 5,
      "isPinned": false
    },
    {
      "id": "aee88fc2-2dfc-4679-8469-8daf4a00a9e4",
      "category": "EntityRelationshipDiagram",
      "description": "zero/one-to-one relationship",
      "content": "A |o--|| B : label",
      "sortingOrder": 6,
      "isPinned": false
    },
    {
      "id": "78e6066d-691d-4a18-96be-29209b989fb6",
      "category": "EntityRelationshipDiagram",
      "description": "one-to-one/zero relationship",
      "content": "A ||--o| B : label",
      "sortingOrder": 7,
      "isPinned": false
    },
    {
      "id": "e13caddc-c202-4613-b401-9549b22d3213",
      "category": "EntityRelationshipDiagram",
      "description": "zero-or-more-to-one relationship",
      "content": "A }o--|| B : label",
      "sortingOrder": 8,
      "isPinned": false
    },
    {
      "id": "80fd8c8d-8802-4b2a-895e-d9068aa09c24",
      "category": "EntityRelationshipDiagram",
      "description": "one-to-zero-or-more relationship",
      "content": "A ||--o{ B : label",
      "sortingOrder": 9,
      "isPinned": false
    },
    {
      "id": "f9264007-9645-4146-af4e-16fe7c3f7aff",
      "category": "EntityRelationshipDiagram",
      "description": "zero-or-more-to-many relationship",
      "content": "A }o--|{ B : label",
      "sortingOrder": 10,
      "isPinned": false
    },
    {
      "id": "62e2bd1e-b30c-4c25-8f8b-927f927c3f92",
      "category": "EntityRelationshipDiagram",
      "description": "many-to-zero-or-more relationship",
      "content": "A }|--o{ B : label",
      "sortingOrder": 11,
      "isPinned": false
    },
    {
      "id": "db554c4e-b074-496c-9883-61d6b53b9fea",
      "category": "UserJourneyDiagram",
      "description": "a sample user journey diagram",
      "content": "journey\n        title My working day\n        section Go to work\n          Make tea: 5: Me\n          Go upstairs: 3: Me\n          Do work: 1: Me, Cat\n        section Go home\n          Go downstairs: 5: Me\n          Sit down: 5: Me",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "id": "2f808b8b-8630-43ee-b6bb-4fb89bd50f4f",
      "category": "UserJourneyDiagram",
      "description": "a step in user journey",
      "content": "      Step Title: 5: ActorName",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "6404e1ec-0c21-4733-84d1-7375ce1667a7",
      "category": "GanttChart",
      "description": "simple gantt chart",
      "content": "gantt\n        title A Gantt Diagram\n        dateFormat  YYYY-MM-DD\n        section Section\n        A task           :a1, 2014-01-01, 30d\n        Another task     :after a1  , 20d\n        section Another\n        Task in sec      :2014-01-12  , 12d\n        another task      : 24d",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "id": "ef17778d-3c8f-4d84-846a-5df834785970",
      "category": "GanttChart",
      "description": "rich gantt chart",
      "content": "gantt\n        dateFormat  YYYY-MM-DD\n        title       Adding GANTT diagram functionality to mermaid\n        excludes    weekends\n    \n        section A section\n        Completed task            :done,    des1, 2014-01-06,2014-01-08\n        Active task               :active,  des2, 2014-01-09, 3d\n        Future task               :         des3, after des2, 5d\n        Future task2              :         des4, after des3, 5d\n    \n        section Critical tasks\n        Completed task in the critical line :crit, done, 2014-01-06,24h\n        Implement parser and jison          :crit, done, after des1, 2d\n        Create tests for parser             :crit, active, 3d\n        Future task in critical line        :crit, 5d\n        Create tests for renderer           :2d\n        Add to mermaid                      :1d\n        Functionality added                 :milestone, 2014-01-25, 0d\n    \n        section Documentation\n        Describe gantt syntax               :active, a1, after des1, 3d\n        Add gantt diagram to demo page      :after a1  , 20h\n        Add another diagram to demo page    :doc1, after a1  , 48h\n    \n        section Last section\n        Describe gantt syntax               :after doc1, 3d\n        Add gantt diagram to demo page      :20h\n        Add another diagram to demo page    :48h",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "62284976-de34-4d7c-a902-f6aa7c88830c",
      "category": "GanttChart",
      "description": "milestones example",
      "content": "gantt\n        dateFormat HH:mm\n        axisFormat %H:%M\n        Initial milestone : milestone, m1, 17:49,2min\n        taska2 : 10min\n        taska3 : 5min\n        Final milestone : milestone, m2, 18:14, 2min",
      "sortingOrder": 2,
      "isPinned": false
    },
    {
      "id": "6981887a-1649-4d33-9673-e548f73bfc39",
      "category": "PieChart",
      "description": "sample pie chart",
      "content": "pie title /r/obsidianmd posts by type\n        \"Look at my awesome graph\" : 85\n        \"Look at my cool dashboard\" : 14\n        \"Moved from Notion, liking it\" : 1",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "id": "387393b5-07d6-4eef-b1e4-bd01721cee0b",
      "category": "PieChart",
      "description": "sample pie chart with values shown in legend",
      "content": "pie showdata\n        title /r/obsidianmd posts by type\n        \"Graphs\" : 85\n        \"Dashboards\" : 14\n        \"Tips\" : 1",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "4a5e73bd-287d-432f-a964-36504b47a81f",
      "category": "RequirementDiagram",
      "description": "sample requirements diagram",
      "content": "    requirementDiagram\n\n        requirement test_req {\n        id: 1\n        text: the test text.\n        risk: high\n        verifymethod: test\n        }\n    \n        element test_entity {\n        type: simulation\n        }\n    \n        test_entity - satisfies -> test_req",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "id": "aae01bf6-148f-4b6d-89d2-323a41e85569",
      "category": "RequirementDiagram",
      "description": "sample requirements diagram",
      "content": "element customElement {\n            type: customType\n            docref: customDocRef\n        }",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "a03f9c60-ad66-428b-8bc8-38f8e02729c9",
      "category": "RequirementDiagram",
      "description": "a requirement with high risk",
      "content": "functionalRequirement myReq {\n            id: reqId\n            text: someText\n            risk: High\n            verifymethod: analysis\n        }",
      "sortingOrder": 2,
      "isPinned": false
    },
    {
      "id": "2cf76eef-6656-4c71-893f-a5901fe7ddd9",
      "category": "RequirementDiagram",
      "description": "sample requirements diagram",
      "content": "interfaceRequirement myReq2 {\n            id: reqId\n            text: someText\n            risk: Medium\n            verifymethod: demonstration\n        }",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "id": "f44e434f-f5d2-42fa-ae59-84525a45f417",
      "category": "RequirementDiagram",
      "description": "sample requirements diagram",
      "content": "designConstraint myReq3 {\n            id: reqId\n            text: someText\n            risk: Low\n            verifymethod: test\n        }",
      "sortingOrder": 4,
      "isPinned": false
    },
    {
      "id": "0516a886-f983-4b2e-9d1b-dcca734ef9d1",
      "category": "GitGraph",
      "description": "simple git graph",
      "content": "gitGraph\n        commit\n        commit\n        branch develop\n        checkout develop\n        commit\n        commit\n        checkout main\n        merge develop\n        commit\n        commit",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "id": "0b585f14-5f52-4c1a-b7b1-ed65a9e9d3d7",
      "category": "GitGraph",
      "description": "tagged commit",
      "content": "commit id: \"Normal\" tag: \"v1.0.0\"",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "490a5f95-4e8d-4db0-9fc0-50e54cb08562",
      "category": "GitGraph",
      "description": "reverse commit",
      "content": "commit id: \"Reverse\" type: REVERSE",
      "sortingOrder": 2,
      "isPinned": false
    },
    {
      "id": "30b0c4fb-7e6c-43d5-86ad-e5db9f05135f",
      "category": "GitGraph",
      "description": "highlighted commit",
      "content": "commit id: \"Highlight\" type: HIGHLIGHT",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "id": "4961ef42-5e6e-4ccf-be6a-584acbee759e",
      "category": "GitGraph",
      "description": "reverse commit",
      "content": "commit id: \"Reverse\" type: REVERSE",
      "sortingOrder": 4,
      "isPinned": false
    },
    {
      "id": "df527cc5-2970-4824-9879-ece286d0f211",
      "category": "GitGraph",
      "description": "git graph with cherry-pick",
      "content": "gitGraph\n        commit id: \"ZERO\"\n        branch develop\n        commit id:\"A\"\n        checkout main\n        commit id:\"ONE\"\n        checkout develop\n        commit id:\"B\"\n        checkout main\n        commit id:\"TWO\"\n        cherry-pick id:\"A\"\n        commit id:\"THREE\"\n        checkout develop\n        commit id:\"C\"",
      "sortingOrder": 5,
      "isPinned": false
    },
    {
      "id": "4bcc0745-458d-4183-aa77-c787de13fdc2",
      "category": "Mindmap",
      "description": "a simple mindmap",
      "content": "mindmap\n        Root\n            A\n              B\n              C",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "22c2021f-052a-46e7-b40c-2b5aa03703c7",
      "category": "Mindmap",
      "description": "square",
      "content": "id[I am a square]",
      "sortingOrder": 2,
      "isPinned": false
    },
    {
      "id": "09e2bf77-8c82-45f1-8674-babc98eef2e4",
      "category": "Mindmap",
      "description": "rounded square",
      "content": "id(I am a rounded square)",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "id": "010f79bf-016c-472e-8c86-d17ad194ec12",
      "category": "Mindmap",
      "description": "circle",
      "content": "id((I am a circle))",
      "sortingOrder": 4,
      "isPinned": false
    },
    {
      "id": "6b459c4e-9fa7-42cc-8f2e-b03cb11cfbe9",
      "category": "Mindmap",
      "description": "bang",
      "content": "id))I am a bang((",
      "sortingOrder": 5,
      "isPinned": false
    },
    {
      "id": "9b2470fb-618b-42a3-aa8d-1719fcaaa82b",
      "category": "Mindmap",
      "description": "cloud",
      "content": "id)I am a cloud(",
      "sortingOrder": 6,
      "isPinned": false
    },
    {
      "id": "1a662584-fd61-4c5d-bb11-ef38a9a2242e",
      "category": "Mindmap",
      "description": "hexagon",
      "content": "id{{I am a hexagon}}",
      "sortingOrder": 7,
      "isPinned": false
    },
    {
      "id": "8f27fbf0-5ac3-4b22-90c9-998b8a99025c",
      "category": "Mindmap",
      "description": "default",
      "content": "I am the default shape",
      "sortingOrder": 8,
      "isPinned": false
    },
    {
      "id": "3e7cb7ca-c9a2-488f-a8d0-3a187b8968f9",
      "category": "Mindmap",
      "description": "sample mindmap",
      "content": "mindmap\n        root((mindmap))\n          Origins\n            Long history\n            Popularisation\n              British popular psychology author Tony Buzan\n          Research\n            On effectiveness<br/>and features\n            On Automatic creation\n              Uses\n                  Creative techniques\n                  Strategic planning\n                  Argument mapping\n          Tools\n            Pen and paper\n            Mermaid",
      "sortingOrder": 9,
      "isPinned": false
    },
    {
      "id": "add3c2d3-355b-4973-8e72-b9aecd75d3c1",
      "category": "Timeline",
      "description": "sample timeline",
      "content": "timeline\n\t\ttitle History of Social Media Platform\n\t\t2002 : LinkedIn\n\t\t2004 : Facebook\n\t\t\t : Google\n\t\t2005 : Youtube\n\t\t2006 : Twitter",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "3d4258e9-c301-4cfa-827a-c2f34a3623b1",
      "category": "Timeline",
      "description": "timeline with grouping",
      "content": "timeline\n\t\ttitle Timeline of Industrial Revolution\n\t\tsection 17th-20th century\n\t\t\tIndustry 1.0 : Machinery, Water power, Steam <br>power\n\t\t\tIndustry 2.0 : Electricity, Internal combustion engine, Mass production\n\t\t\tIndustry 3.0 : Electronics, Computers, Automation\n\t\tsection 21st century\n\t\t\tIndustry 4.0 : Internet, Robotics, Internet of Things\n\t\t\tIndustry 5.0 : Artificial intelligence, Big data,3D printing",
      "sortingOrder": 2,
      "isPinned": false
    },
    {
      "id": "1e25e406-740e-4b69-9eb7-56a57eabda02",
      "category": "Timeline",
      "description": "timeline with Forest theme. see the docs for additional themes",
      "content": "%%{init: { 'logLevel': 'debug', 'theme': 'forest' } }%%\n\t\ttimeline\n\t\t\ttitle History of Social Media Platform\n\t\t\t  2002 : LinkedIn\n\t\t\t  2004 : Facebook : Google\n\t\t\t  2005 : Youtube\n\t\t\t  2006 : Twitter\n\t\t\t  2007 : Tumblr\n\t\t\t  2008 : Instagram\n\t\t\t  2010 : Pinterest",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "id": "a5ff2f86-7c7d-4e9d-abd6-a418588e6953",
      "category": "QuadrantChart",
      "description": "sample quadrant chart",
      "content": "quadrantChart\n\t\ttitle Reach and engagement of campaigns\n\t\tx-axis Low Reach --> High Reach\n\t\ty-axis Low Engagement --> High Engagement\n\t\tquadrant-1 We should expand\n\t\tquadrant-2 Need to promote\n\t\tquadrant-3 Re-evaluate\n\t\tquadrant-4 May be improved\n\t\tCampaign A: [0.3, 0.6]\n\t\tCampaign B: [0.45, 0.23]\n\t\tCampaign C: [0.57, 0.69]\n\t\tCampaign D: [0.78, 0.34]\n\t\tCampaign E: [0.40, 0.34]\n\t\tCampaign F: [0.35, 0.78]",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "911e78b1-c24b-4aaa-926d-07ba6545e8a1",
      "category": "QuadrantChart",
      "description": "themed quadrant chart",
      "content": "%%{init: {\"quadrantChart\": {\"chartWidth\": 400, \"chartHeight\": 400}, \"themeVariables\": {\"quadrant1TextFill\": \"#ff0000\"} }}%%\n\t\tquadrantChart\n\t\t  x-axis Urgent --> Not Urgent\n\t\t  y-axis Not Important --> \"Important ❤\"\n\t\t  quadrant-1 Plan\n\t\t  quadrant-2 Do\n\t\t  quadrant-3 Delegate\n\t\t  quadrant-4 Delete",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "id": "a065cafc-ca73-43a1-9876-5e1d001036c1",
      "category": "C4Diagram",
      "description": "sample C4 diagram (compatible with PlantUML)",
      "content": "C4Context\n\t\ttitle System Context diagram for Internet Banking System\n\t\tEnterprise_Boundary(b0, \"BankBoundary0\") {\n\t\t  Person(customerA, \"Banking Customer A\", \"A customer of the bank, with personal bank accounts.\")\n\t\t  Person(customerB, \"Banking Customer B\")\n\t\t  Person_Ext(customerC, \"Banking Customer C\", \"desc\")\n  \n\t\t  Person(customerD, \"Banking Customer D\", \"A customer of the bank, <br/> with personal bank accounts.\")\n  \n\t\t  System(SystemAA, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\n  \n\t\t  Enterprise_Boundary(b1, \"BankBoundary\") {\n  \n\t\t\tSystemDb_Ext(SystemE, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n  \n\t\t\tSystem_Boundary(b2, \"BankBoundary2\") {\n\t\t\t  System(SystemA, \"Banking System A\")\n\t\t\t  System(SystemB, \"Banking System B\", \"A system of the bank, with personal bank accounts. next line.\")\n\t\t\t}\n  \n\t\t\tSystem_Ext(SystemC, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\n\t\t\tSystemDb(SystemD, \"Banking System D Database\", \"A system of the bank, with personal bank accounts.\")\n  \n\t\t\tBoundary(b3, \"BankBoundary3\", \"boundary\") {\n\t\t\t  SystemQueue(SystemF, \"Banking System F Queue\", \"A system of the bank.\")\n\t\t\t  SystemQueue_Ext(SystemG, \"Banking System G Queue\", \"A system of the bank, with personal bank accounts.\")\n\t\t\t}\n\t\t  }\n\t\t}\n  \n\t\tBiRel(customerA, SystemAA, \"Uses\")\n\t\tBiRel(SystemAA, SystemE, \"Uses\")\n\t\tRel(SystemAA, SystemC, \"Sends e-mails\", \"SMTP\")\n\t\tRel(SystemC, customerA, \"Sends e-mails to\")\n  \n\t\tUpdateElementStyle(customerA, $fontColor=\"red\", $bgColor=\"grey\", $borderColor=\"red\")\n\t\tUpdateRelStyle(customerA, SystemAA, $textColor=\"blue\", $lineColor=\"blue\", $offsetX=\"5\")\n\t\tUpdateRelStyle(SystemAA, SystemE, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-10\")\n\t\tUpdateRelStyle(SystemAA, SystemC, $textColor=\"blue\", $lineColor=\"blue\", $offsetY=\"-40\", $offsetX=\"-50\")\n\t\tUpdateRelStyle(SystemC, customerA, $textColor=\"red\", $lineColor=\"red\", $offsetX=\"-50\", $offsetY=\"20\")\n  \n\t\tUpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")",
      "sortingOrder": 1,
      "isPinned": false
    }
  ],
  "selectedCategory": "Flowchart"
}